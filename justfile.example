set positional-arguments

alias t := test
alias dv := deploy-verify
alias dnv := deploy-noverify
alias rv := resume-verify
alias rnv := resume-noverify
alias s := script
alias ss := send
alias sf := send-fork

@kek message:
	echo "-> Signing $1"

@deploy-noverify script sig:
  cd {{invocation_directory()}} && \
  forge script $1 --sig "$2()" --ffi --broadcast \
  --chain arbitrum \
  --fork-url "$RPC_ARBITRUM"

@resume-noverify script sig:
  cd {{invocation_directory()}} && \
  forge script $1 --sig "$2()" --ffi --broadcast \
  --chain arbitrum \
  --skip-simulation \
  --rpc-url "$RPC_ARBITRUM" \
  --verify \
  --resume

@deploy-verify script sig:
  cd {{invocation_directory()}} && \
  forge script $1 --sig "$2()" --ffi --broadcast \
  --chain arbitrum \
  --fork-url "$RPC_ARBITRUM" \
  --verify

@resume-verify script sig:
  cd {{invocation_directory()}} && \
  forge script $1 --sig "$2()" --ffi --broadcast \
  --chain arbitrum \
  --skip-simulation \
  --rpc-url "$RPC_ARBITRUM" \
  --verify \
  --resume

verify-proxy-contract:
	forge verify-contract 0x \
	src/contracts/core/factory/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy \
	--chain arbitrum \
	--watch \
	--constructor-args "0x"

verify-contract:
	forge verify-contract 0x \
	KreskoAsset \
	--chain arbitrum \
	--watch \
	--constructor-args "0x"

@send-fork contract func:
  cd {{invocation_directory()}} && \
  forge script $1 --sig "$2()" --ffi --broadcast --skip-simulation -vvv --unlocked && \
  echo "-> $1.$2() ran successfully"

@script contract func:
  cd {{invocation_directory()}} && \
  forge script $1 --sig "$2()" --ffi -vvv && \
  echo "-> $1.$2() ran successfully"

@send contract func:
  cd {{invocation_directory()}} && \
  forge script $1 --sig "$2()" --ffi --broadcast --skip-simulation -vvv --with-gas-price 150000000 && \
  echo "-> $1.$2() ran successfully"
  
@test func:
  cd {{invocation_directory()}} && \
  forge test --mt ".*$1.*" --ffi -vvv && \
  echo "-> $1() ran successfully"

@sign message:
  cd {{invocation_directory()}} && \
  echo "-> Signing $1" && \
  bun lib/kresko-lib/utils/ffi-safe.ts signMessage $1

@safe-run script func:
  cd {{invocation_directory()}} && \
  forge script $1 --sig "$2()" --ffi -vvv && \
  echo "-> $1.$2() ran successfully" && \
  echo "-> Sending (signature required).." && \
  forge script SafeScript --sig "sendBatch(string)" $2 --ffi -vvv && \
  echo "-> Sent!"

@safe-run-nonce script func nonce:
  cd {{invocation_directory()}} && \
  forge script $1 --sig "$2()" --ffi -vvv && \
  echo "-> $1.$2() ran successfully" && \
  echo "-> Sending (signature required).." && \
  forge script SafeScript --sig "sendBatch(string,uint256)" $2 $3 --ffi -vvv && \
  echo "-> Sent!"

@safe-dry script func:
  cd {{invocation_directory()}} && \
  echo "-> Simulating.." && \
  forge script $1 --sig "$2()" --ffi -vvv && \
  echo "-> $1.$2() ran successfully" && \
  forge script SafeScript --sig "simulateAndSign(string,uint256)" $2 0 --ffi -vvv && \
  echo "-> Success! run 'just safe-file SIGNED_BATCH_OUTPUT_FILENAME' to send it."

@safe-file batchfile:
  cd {{invocation_directory()}} && \
  echo "-> Sending $1.." && \
  bun lib/kresko-lib/utils/ffi-safe.ts proposeBatch $1 true && \
  echo "-> Sent!"

@safe-del safeTxHash:
  cd {{invocation_directory()}} && \
  echo "-> Sign to delete $1" && \
  bun lib/kresko-lib/utils/ffi-safe.ts deleteBatch $1 && \
  echo "-> Deleted $1"