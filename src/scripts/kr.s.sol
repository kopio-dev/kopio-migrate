// SPDX-License-Identifier: UNLICENSED
// solhint-disable
pragma solidity ^0.8.13;

import {Help, Log} from "kr/utils/Libs.s.sol";
import {KrBase} from "s/base/KrBase.s.sol";
import {DataV3} from "c/DataV3.sol";
import {GnosisSafeProxyFactory} from "c/Safe.sol";
import {__revert} from "kr/utils/Base.s.sol";
import {IERC20} from "kr/token/IERC20.sol";

contract kr is KrBase {
    using Log for *;
    using Help for *;
    DataV3 data;
    bytes initializer =
        hex"b63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000020ea35a9e29de2a62c7a3abb6b16a1656a68e3c1000000000000000000000000f628f8ce32d3c26c8ca57c58ad965649ea09a71a0000000000000000000000000d3878fc4ec42601be0f470f727536cf048b7a540000000000000000000000000adeb08699a31284c80f98ad5a502da4b218bb6500000000000000000000000047acff0b1c73937b61dfd1765125564c0678a4460000000000000000000000000000000000000000000000000000000000000000";
    IERC20 tel = IERC20(0xdF7837DE1F2Fa4631D716CF2502f8b230F1dcc32);
    GnosisSafeProxyFactory safeFactory =
        GnosisSafeProxyFactory(
            payable(0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2)
        );

    function setUp() public virtual {
        vm.createSelectFork("polygon", 58915217);
        sender = getAddr("PRIVATE_TWENTY");
    }

    function krTx() public returns (address safe_) {
        bytes32("XAU").blg();
        bytes32("XAG").blg();
        // safe_ = address(
        //     safeFactory.createProxy(
        //         0xdF7837DE1F2Fa4631D716CF2502f8b230F1dcc32,
        //         abi.encodeCall(IERC20.approve, (address(sender), 100 ether))
        //     )
        // );
    }
}
